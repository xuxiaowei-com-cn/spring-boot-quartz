#
# 定时器 配置
spring:
  quartz:
    # 默认值：MEMORY，定时器作业存储类型。
    job-store-type: jdbc
    # 数据库
    jdbc:
      # 是否初始化表结构
      initialize-schema: never
    # 其他Quartz调度性能。
    properties:
      # http://www.quartz-scheduler.org/documentation/2.4.0-SNAPSHOT/configuration.html
      org:
        quartz:
          jobStore:
            # JobStoreTX通过在执行每个操作（例如添加作业）之后在数据库连接上调用commit（）（或rollback（））本身来管理所有事务。
            # 如果您在独立应用程序中使用Quartz，或者在Servlet容器中使用Quartz（如果应用程序未使用JTA事务），则JDBCJobStore是合适的。
            class: org.quartz.impl.jdbcjobstore.JobStoreTX
            # 数据库驱动：
            # 完全兼容JDBC的驱动程序：
            # org.quartz.impl.jdbcjobstore.StdJDBCDelegate （对于完全兼容JDBC的驱动程序）
            # org.quartz.impl.jdbcjobstore.MSSQLDelegate （对于Microsoft SQL Server和Sybase）
            # org.quartz.impl.jdbcjobstore.PostgreSQLDelegate
            # org.quartz.impl.jdbcjobstore.WebLogicDelegate （对于WebLogic驱动程序）
            # org.quartz.impl.jdbcjobstore.oracle.OracleDelegate
            # org.quartz.impl.jdbcjobstore.oracle.WebLogicOracleDelegate （对于在Weblogic中使用的Oracle驱动程序）
            # org.quartz.impl.jdbcjobstore.oracle.weblogic.WebLogicOracleDelegate （对于在Weblogic中使用的Oracle驱动程序）
            # org.quartz.impl.jdbcjobstore.CloudscapeDelegate
            # org.quartz.impl.jdbcjobstore.DB2v6Delegate
            # org.quartz.impl.jdbcjobstore.DB2v7Delegate
            # org.quartz.impl.jdbcjobstore.DB2v8Delegate
            # org.quartz.impl.jdbcjobstore.HSQLDBDelegate
            # org.quartz.impl.jdbcjobstore.PointbaseDelegate
            # org.quartz.impl.jdbcjobstore.SybaseDelegate
            driverDelegateClass: org.quartz.impl.jdbcjobstore.StdJDBCDelegate
            # JDBCJobStore的“表前缀”属性是一个字符串，该字符串等于在数据库中创建的Quartz表的前缀。
            # 如果它们使用不同的表前缀，则可以在同一数据库中具有多组Quartz表。
            tablePrefix: QRTZ_
            # 设置为“true”以打开群集功能。
            # 如果您有多个Quartz实例使用同一组数据库表，则必须将此属性设置为“true”。
            # 否则，您将遭受严重破坏。有关更多信息，请参见配置文档。
            isClustered: true
            # 设置此实例与其他群集实例“签入” *的频率（以毫秒为单位）。影响检测失败实例的速度。
            clusterCheckinInterval: 10000
            # “使用属性”标志指示JDBCJobStore JobDataMaps中的所有值都是字符串，因此可以将它们存储为名称/值对，而不是将更复杂的对象以其序列化形式存储在BLOB列中。
            # 这很方便，因为避免了将非String类序列化为BLOB可能引起的类版本控制问题。
            useProperties: false
            # 调度程序在被认为是“误发”之前将“容忍”触发器经过下一次触发时间的毫秒数。默认值（如果未在配置中输入此属性）为60000（60秒）。
            misfireThreshold: 60000
          scheduler:
            # 可以是任何字符串，并且该值对调度程序本身没有意义-而是当同一程序中使用多个实例时，它用作客户端代码区分调度程序的机制。
            # 如果使用群集功能，则必须在群集中的每个实例在逻辑上相同的Scheduler中使用相同的名称。
            instanceName: quartzScheduler
            # 可以是任何字符串，但是对于所有工作的调度程序来说必须是唯一的，就像它们在集群中是相同的“逻辑”调度程序一样。
            # 如果希望为您生成ID，则可以将值“AUTO”用作instanceId。如果希望该值来自系统属性“org.quartz.scheduler.instanceId”，则为“SYS_PROP”。
            instanceId: AUTO
            instanceIdGenerator:
              # 仅当org.quartz.scheduler.instanceId设置为“AUTO”时使用。
              # 默认为“org.quartz.simpl.SimpleInstanceIdGenerator”，它根据主机名和时间戳生成实例ID。
              # 其他IntanceIdGenerator实现包括SystemPropertyInstanceIdGenerator（从系统属性“org.quartz.scheduler.instanceId”获取实例ID）
              # 和HostnameInstanceIdGenerator，后者使用本地主机名（InetAddress.getLocalHost（）。getHostName（））。
              # 您还可以实现InstanceIdGenerator接口自己。
              class: org.quartz.simpl.SimpleInstanceIdGenerator
            # 可以是Java线程的有效名称的任何String。
            # 如果未指定此属性，则线程将接收调度程序的名称（“org.quartz.scheduler.instanceName”）以及附加的字符串“_QuartzSchedulerThread”。
            threadName:
            # 一个布尔值（“true”或“false”），它指定调度程序的主线程是否应该是守护程序线程。
            # 另请参见org.quartz.scheduler.makeSchedulerThreadDaemon属性，以调整SimpleThreadPool是否使用的线程池实现（这很可能是这种情况）。
            makeSchedulerThreadDaemon:
            # 一个布尔值（“true”或“false”），用于指定Quartz产生的线程是否将继承初始化线程（用于初始化Quartz实例的线程）的上下文ClassLoader。
            # 这将影响Quartz主调度线程，JDBCJobStore的失火处理线程（如果使用JDBCJobStore），集群恢复线程（如果使用集群）和SimpleThreadPool中的线程（如果使用SimpleThreadPool）。
            # 将此值设置为“true”可能有助于类加载，JNDI查找以及与在应用程序服务器中使用Quartz相关的其他问题。
            threadsInheritContextClassLoaderOfInitializer:
            # 是当调度程序处于空闲状态时，调度程序在重新查询可用触发器之前等待的时间（以毫秒为单位）。
            # 通常，除非您正在使用XA事务，并且存在延迟触发应立即触发的触发器的问题，否则您不必“调整”此参数。
            # 不建议使用小于5000 ms的值，因为它将导致过多的数据库查询。
            # 小于1000的值不合法。
            idleWaitTime:
            # 是调度程序在检测到JobStore内（例如，与数据库的）连接断开时在重试之间等待的时间（以毫秒为单位）。
            # 使用RamJobStore时，此参数显然没有太大意义。
            dbFailureRetryInterval:
            classLoadHelper:
              # 默认为最可靠的方法，即使用“org.quartz.simpl.CascadingClassLoadHelper”类-该类依次使用所有其他ClassLoadHelper类，直到一个可用为止。
              # 尽管应用服务器中似乎发生了奇怪的事情，但您可能不应该为此属性指定其他任何类。
              # 当前所有可能的ClassLoadHelper实现都可以在org.quartz.simpl包中找到。
              class:
            jobFactory:
              # 要使用的JobFactory的类名。JobFatcory负责产生JobClasses的实例。
              # 默认值为“org.quartz.simpl.PropertySettingJobFactory”，它每次执行即将执行时，仅在类上调用newInstance（）来生成一个新实例。
              # PropertySettingJobFactory还使用SchedulerContext和Job和Trigger JobDataMaps的内容来反射性地设置作业的bean属性。
              class:
            # 应该设置为Quartz可以在其中找到Application Server的UserTransaction管理器的JNDI URL。默认值（如果未指定）是“java：comp / UserTransaction”-几乎适用于所有Application Server。
            # Websphere用户可能需要将此属性设置为“jta / usertransaction”。
            # 仅当Quartz配置为使用JobStoreCMT且org.quartz.scheduler.wrapJobExecutionInUserTransaction设置为true时，才使用此选项。
            userTransactionURL:
            # 如果您希望Quartz在调用对您的作业执行execute之前启动UserTransaction，则应将其设置为“true”。
            # 在作业的execute方法完成之后，并且JobDataMap更新后（如果它是StatefulJob），Tx将提交。默认值为“false”。
            # 您可能还对在作业类上使用@ExecuteInJTATransaction批注感兴趣，该批注可让您控制单个作业是否Quartz应该启动JTA事务-而此属性使它在所有作业中都发生。
            wrapJobExecutionInUserTransaction:
            # 是否跳过运行快速Web请求以确定是否有可供下载的Quartz更新版本。
            # 如果运行检查并找到更新，它将在Quartz日志中报告为可用。
            # 您还可以使用系统属性“org.terracotta.quartz.skipUpdateCheck = true”（可以在系统环境中设置，也可以在Java命令行中将其设置为-D）来禁用更新检查。建议您禁用生产部署的更新检查。
            skipUpdateCheck:
            # 允许调度程序节点一次获取（触发）的最大触发器数。默认值是1。
            # 数字越大，触发效率越高（在一次触发很多触发器的情况下），但代价是群集节点之间的负载可能不均衡。
            # 如果此属性的值设置为> 1，并且使用JDBC JobStore，则必须将属性“org.quartz.jobStore.acquireTriggersWithinLock”设置为“true”，以避免数据损坏。
            batchTriggerAcquisitionMaxCount:
            # 允许触发器被捕获并在其计划的触发时间之前触发的时间（以毫秒为单位）。
            # 默认值为0。
            # 数字越大，触发触发器的批量采集越有可能一次选择并触发1个以上的触发器-代价是无法精确遵守触发时间表（触发器可能会提前触发此数量））。
            # 在调度程序具有大量需要同时或接近同时触发的触发器的情况下，这可能是有用的（出于性能考虑）。
            batchTriggerAcquisitionFireAheadTimeWindow:
          threadPool:
            # 是您要使用的ThreadPool实现的名称。
            # Quartz附带的线程池是“org.quartz.simpl.SimpleThreadPool”，并且应该满足几乎每个用户的需求。
            # 它的行为非常简单，并且经过了很好的测试。
            # 它提供了一个固定大小的线程池，这些线程池“活跃”了调度程序的生命周期。
            class: org.quartz.simpl.SimpleThreadPool
            # 可以是任何正整数，尽管您应该意识到只有1到100之间的数字是非常实用的。
            # 这是可用于并发执行作业的线程数。
            # 如果您每天只有少量工作要执行几次，那么一个线程就足够了！如果您有成千上万的工作，每分钟触发许多工作，那么您可能希望线程数更像50或100（这在很大程度上取决于您工作执行的工作性质以及系统资源！）。
            threadCount: 10
            # 可以是Thread.MIN_PRIORITY（为1）和Thread.MAX_PRIORITY（为10）之间的任何整数。
            # 默认值为Thread.NORM_PRIORITY（5）。
            threadPriority: 5
            # 可以设置为“true”以将池中的线程创建为守护程序线程。
            # 默认值为“false”。
            # 另请参见ConfigMain org.quartz.scheduler.makeSchedulerThreadDaemon属性。
            makeThreadsDaemons:
            # 可以为“true”或“false”，默认为true。
            threadsInheritGroupOfInitializingThread:
            # 可以为“true”或“false”，默认为false。
            threadsInheritContextClassLoaderOfInitializingThread:
            # 工作池中线程名称的前缀-将附加一个数字。
            threadNamePrefix:
        context:
          key:
            # 表示将以字符串形式放置在“调度程序上下文”中的名称/值对。（请参阅Scheduler.getContext（））。
            # 因此，例如，设置“org.quartz.context.key.MyKey = MyValue”将执行scheduler.getContext（）。put（“MyKey”，“MyValue”）的等效操作。
            # 注意：与事务相关的属性应保留在配置文件中，除非您使用的是JTA事务。
            SOME_KEY:
